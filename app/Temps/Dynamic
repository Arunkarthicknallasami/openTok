package com.tokbox.pictureinpicturesample;

import android.Manifest;
import android.app.Activity;
import android.app.PictureInPictureParams;
import android.content.res.Configuration;
import android.opengl.GLSurfaceView;
import android.os.Bundle;
import android.util.Log;
import android.util.Rational;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.Toast;

import com.opentok.android.OpentokError;
import com.opentok.android.Publisher;
import com.opentok.android.Session;
import com.opentok.android.Stream;
import com.opentok.android.Subscriber;

public class MainActivity extends Activity implements Session.SessionListener {

    public static final String API_KEY = "46146822";
    public static final String TOKEN = "T1==cGFydG5lcl9pZD00NjE0NjgyMiZzaWc9MzEzZWVjZGIzN2NhNzk0YTkyOGI0OGEwZGRkYWY2YjM2MjRiN2ExMjpzZXNzaW9uX2lkPTFfTVg0ME5qRTBOamd5TW41LU1UVXpNVGd5T0RFeE56TXhPWDUyTDJnNGNVTnVaRXRPVmtwV2FqTmpabEZ4UVdFelJ5OS1RWDQmY3JlYXRlX3RpbWU9MTUzMTgyODE2NCZub25jZT0zNjM5MDUmcm9sZT1NT0RFUkFUT1ImZXhwaXJlX3RpbWU9MTUzMjQzMjk2NCZjb25uZWN0aW9uX2RhdGE9bmFtZSUzZEthcnRoaQ==";
    public static final String SESSION_ID = "1_MX40NjE0NjgyMn5-MTUzMTgyODExNzMxOX52L2g4cUNuZEtOVkpWajNjZlFxQWEzRy9-QX4";

    Session session;
    Publisher publisher;
    Subscriber subscriber;
    private static final String TAG = MainActivity.class.getSimpleName();

    String msg = "Tok";
    private Button btn_pip;
    private boolean isPublisher = true;
    DragFrameLayout frame_drag;
    FrameLayout frameFullScreen, framePop;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Log.d(TAG, "Activity Instance: " + this.toString());
        setContentView(R.layout.activity_main);
        frame_drag = findViewById(R.id.frame_drag);

        initView();

        frame_drag.setDragFrameController(new DragFrameLayout.DragFrameLayoutController() {

            @Override
            public void onDragDrop(boolean captured) {
                /* Animate the translation of the {@link View}. Note that the translation
                 is being modified, not the elevation. */
                framePop.animate()
                        .translationZ(captured ? 50 : 0)
                        .setDuration(100);
                Log.d(TAG, captured ? "Drag" : "Drop");
            }

            @Override
            public void onclick() {
                if (isPublisher) {
                    isPublisher = false;
                    frameFullScreen.removeAllViews();
                    framePop.removeAllViews();
                    frame_drag.removeDragView();
                    frame_drag.removeAllViews();
                    initView();
                    framePop.addView(subscriber.getView());
                    frameFullScreen.addView(publisher.getView());
                    if (publisher.getView() instanceof GLSurfaceView) {
                        ((GLSurfaceView) publisher.getView()).setZOrderOnTop(false);
                    }
                } else {
                    isPublisher = true;
                    frameFullScreen.removeAllViews();
                    framePop.removeAllViews();
                    frame_drag.removeDragView();
                    frame_drag.removeAllViews();
                    initView();
                    framePop.addView(publisher.getView());
                    frameFullScreen.addView(subscriber.getView());
                    if (publisher.getView() instanceof GLSurfaceView) {
                        ((GLSurfaceView) publisher.getView()).setZOrderOnTop(true);
                    }
                }
            }
        });


        requestPermissions(new String[]{Manifest.permission.CAMERA, Manifest.permission.RECORD_AUDIO}, 1000);
    }

    private void initView() {
        frameFullScreen = new FrameLayout(this);
        FrameLayout.LayoutParams matchParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
        frameFullScreen.setLayoutParams(matchParams);
        frameFullScreen.setBackgroundColor(0x85000000);


        framePop = new FrameLayout(this);
        FrameLayout.LayoutParams popParams = new FrameLayout.LayoutParams((int) getResources().getDimension(R.dimen._90sdp), (int) getResources().getDimension(R.dimen._120sdp));
        popParams.setMargins(0, (int) getResources().getDimension(R.dimen._16sdp), (int) getResources().getDimension(R.dimen._16sdp), 0);
        popParams.gravity = Gravity.TOP | Gravity.END;
        framePop.setLayoutParams(popParams);
        framePop.setBackgroundColor(getColor(R.color.colorAccent));

        frame_drag.addView(frameFullScreen, 0);
        frame_drag.addView(framePop, 1);
        frame_drag.addDragView(framePop);
    }


    @Override
    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
        if (publisher != null) {
            if (isInPictureInPictureMode) {
//                findViewById(R.id.btn_pip).setVisibility(View.GONE);
                framePop.setVisibility(View.GONE);
                publisher.getView().setVisibility(View.GONE);
                getActionBar().hide();
            } else {
//                findViewById(R.id.btn_pip).setVisibility(View.VISIBLE);
                framePop.setVisibility(View.VISIBLE);
                publisher.getView().setVisibility(View.VISIBLE);
                if (publisher.getView() instanceof GLSurfaceView) {
                    ((GLSurfaceView) publisher.getView()).setZOrderOnTop(true);
                }
                getActionBar().show();
            }
        } else {
            Toast.makeText(MainActivity.this, "Cannot enter PictureInPicture Mode", Toast.LENGTH_SHORT).show();
        }

    }

    public void pipActivity() {
        PictureInPictureParams params = new PictureInPictureParams.Builder()
                .setAspectRatio(new Rational(9, 16)) // Portrait Aspect Ratio
                .build();
        enterPictureInPictureMode(params);
    }


    @Override
    protected void onStart() {
        super.onStart();
        Log.d(TAG, "onStart");

        if (session == null) {
            session = new Session.Builder(getApplicationContext(), API_KEY, SESSION_ID)
                    .build();
        }
        session.setSessionListener(this);
        session.connect(TOKEN);
    }

    @Override
    protected void onPause() {
        super.onPause();

        if (!isInPictureInPictureMode()) {
            if (session != null) {
                session.onPause();
            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (!isInPictureInPictureMode()) {
            if (session != null) {
                session.onResume();
            }
        }
    }

    @Override
    protected void onStop() {
        super.onStop();

        Log.d(TAG, "onStop");

        if (subscriber != null) {
            frameFullScreen.removeView(subscriber.getView());
        }

        if (publisher != null) {
            framePop.removeView(publisher.getView());
        }
    }

    // Session Listener
    @Override
    public void onConnected(Session session) {
        Log.d(TAG, "Session connected");

        if (publisher == null) {
            publisher = new Publisher.Builder(getApplicationContext()).build();
            session.publish(publisher);
            framePop.addView(publisher.getView());
            if (publisher.getView() instanceof GLSurfaceView) {
                ((GLSurfaceView) publisher.getView()).setZOrderOnTop(true);
            }
        }

    }

    @Override
    public void onDisconnected(Session session) {
    }

    @Override
    public void onStreamReceived(Session session, Stream stream) {
        if (subscriber == null) {
            subscriber = new Subscriber.Builder(getApplicationContext(), stream).build();
            session.subscribe(subscriber);
            frameFullScreen.addView(subscriber.getView());
        } else {
            Log.d(TAG, "This sample supports just one subscriber");
        }
    }

    @Override
    public void onStreamDropped(Session session, Stream stream) {
        frameFullScreen.removeAllViews();
        subscriber = null;
    }

    @Override
    public void onError(Session session, OpentokError opentokError) {
    }

}

